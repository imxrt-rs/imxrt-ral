# - Use an array to specify the ENDPTCTRL registers
# - Change ENDPTSTAT to read-write
#
# The 0th ENDPTCTRL is always a control endpoint, which has
# fewer fields than the rest of the ENDPTCTRL registers. It
# also has a different reset value. We exclude ENDPTCTRL0
# from the array.
#
# ENDPTSTAT is marked as read-only in the original SVDs, and
# the reference manual. However, the "Bus Reset" sections of
# i.MX RT reference manuals indicate that we need to read the
# register, then write the values back, during bus reset.

USB1:
  # svdtool doesn't seem to respect or utilize the '%s' placeholders, although there are
  # are examples of this pattern in the stm32-rs [1]. Instead, we'll modify the description
  # for ENDPTCTRL1 before turning it into an array, since the tool seems to be using the description
  # from that register. We'll use a general 'Endpoint Control' description.
  #
  # [1] https://github.com/stm32-rs/stm32-rs/blob/cecd08fa5ad1c8ecf6aeb87fce85dffce9e5c032/devices/common_patches/usb_otg/otg_fs_fixes_v1.yaml#L80
  _modify:
    ENDPTCTRL1:
      description: Endpoint Control
    ENDPTSTAT:
      access: read-write
  _array:
    ENDPTCTRL[1234567]:
      displayName: "ENDPTCTRL%s"
      description: "Endpoint Control"

  # Correct USBCMD[ATDTW] bit offset
  #
  # Bit is correct in 1011 and 1015 SVDs, but
  # it's incorrect in all others. It's placed in
  # the 12th, reserved bit. Confirmed in
  # the 1020, 1050, and 1060 reference manuals
  # that bit 14 is correct.
  USBCMD:
    _modify:
      ATDTW:
        bitOffset: 14
